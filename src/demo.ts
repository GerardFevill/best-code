// @ai-refactor: D√©monstration des fonctionnalit√©s BestCode TypeScript

import { hello, welcome, capitalize, slugify, truncate } from './index';

/**
 * D√©monstration des patterns Result<T, E> et de la validation s√©curis√©e
 */
function demonstrateBestCodePatterns(): void {
  console.log('üöÄ D√©monstration BestCode - Patterns TypeScript S√©curis√©s\n');

  // Test des salutations avec validation
  console.log('=== Tests de Salutation ===');
  
  const helloResult = hello('Relia', 'Bonjour');
  if (helloResult.success) {
    console.log('‚úÖ Salutation:', helloResult.data);
  } else {
    console.error('‚ùå Erreur salutation:', helloResult.error.message);
  }

  const welcomeResult = welcome('D√©veloppeur');
  if (welcomeResult.success) {
    console.log('‚úÖ Bienvenue:', welcomeResult.data);
  } else {
    console.error('‚ùå Erreur bienvenue:', welcomeResult.error.message);
  }

  // Test des utilitaires de cha√Ænes
  console.log('\n=== Tests Utilitaires de Cha√Ænes ===');
  
  const capitalizeResult = capitalize('hello world');
  if (capitalizeResult.success) {
    console.log('‚úÖ Capitalisation:', capitalizeResult.data);
  }

  const slugResult = slugify('Hello World! Comment √ßa va?');
  if (slugResult.success) {
    console.log('‚úÖ Slug:', slugResult.data);
  }

  const truncateResult = truncate('Ceci est un texte tr√®s long qui sera tronqu√©', 30);
  if (truncateResult.success) {
    console.log('‚úÖ Troncature:', truncateResult.data);
  }

  // Test de gestion d'erreurs s√©curis√©e
  console.log('\n=== Tests de S√©curit√© et Validation ===');
  
  const invalidNameResult = hello(123 as unknown as string);
  if (!invalidNameResult.success) {
    console.log('‚úÖ Validation s√©curis√©e - Type invalide d√©tect√©:', invalidNameResult.error.message);
  }

  const emptyNameResult = hello('   ');
  if (!emptyNameResult.success) {
    console.log('‚úÖ Validation s√©curis√©e - Nom vide d√©tect√©:', emptyNameResult.error.message);
  }

  const maliciousInputResult = hello('John<script>alert("xss")</script>');
  if (!maliciousInputResult.success) {
    console.log('‚úÖ S√©curit√© - Input malveillant bloqu√©:', maliciousInputResult.error.message);
  }

  console.log('\nüéØ Tous les patterns BestCode fonctionnent correctement !');
}

// Ex√©cution de la d√©monstration si le fichier est lanc√© directement
if (require.main === module) {
  try {
    demonstrateBestCodePatterns();
  } catch (error) {
    console.error('‚ùå Erreur inattendue:', error);
    process.exit(1);
  }
}
